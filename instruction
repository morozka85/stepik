
--ЗАПУСК--
1)	cd environments
Создадим виртуальное окружение:
python -m venv selenium_env
Запустим созданный для нас приложением venv файл activate.bat, чтобы активировать окружение:
2)	selenium_env\Scripts\activate.bat
Если окружение активировано, то мы увидим в начале командной строки терминала название окружения в круглых скобках. Теперь мы можем устанавливать нужные нам пакеты и запускать скрипты для тестов, которые мы напишем:
Если понадобится выйти из нашего окружения, достаточно выполнить команду deactivate:
#Запускаем из папки environments\ selenium_course
3)python selenium_course\lesson2.4_step7.py
4) Раннер тестов pytest -s -v selenium_course\test_fixture2.py

--ПОИСК ЭЛЕМЕНТОВ с помощью Selenium--
Для поиска элементов на странице в Selenium WebDriver используются несколько стратегий, позволяющих искать по атрибутам элементов, текстам в ссылках, CSS-селекторам и XPath-селекторам. Существуют следующие методы поиска элементов:
•	find_element_by_id - поиск по уникальному атрибуту id элемента. Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло, и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;
•	find_element_by_css_selector - поиск элемента с помощью правил на основе CSS. Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки и задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов, то скорее всего вы будете использовать именно этот метод в ваших тестах;
•	find_element_by_xpath - поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
•	find_element_by_name - поиск по атрибуту name элемента;
•	find_element_by_tag_name - поиск элемента по названию тега элемента;
•	find_element_by_class_name - поиск по значению атрибута class;
•	find_element_by_link_text - поиск ссылки на странице по полному совпадению;
•	find_element_by_partial_link_text - поиск ссылки на странице, если текст селектора совпадает с любой частью текста ссылки.
Например, мы хотим найти кнопку со значением id="submit_button":
from selenium import webdriver

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element_by_id("submit")
Если страница у вас загрузилась, но дальше ничего не происходит, вернитесь обратно в консоль, в которой вы запускали ваш скрипт. Скорее всего, вы увидите там ошибку NoSuchElementException. Она будет выглядеть следующим образом:
selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"id","selector":"submit"}
Ошибка очевидна: мы неправильно указали локатор — значит, кнопки с таким id на странице нет.
Исправим локатор, чтобы наш код проходил без ошибок:
from selenium import webdriver

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element_by_id("submit_button")
Есть второй способ для поиска элементов с помощью универсального метода find_element() и полей класса By из библиотеки selenium. Пример:
from selenium import webdriver

from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element(By.ID, "submit_button")
Можно использовать те же стратегии поиска, что и в первом способе. Второй способ более удобен для оформления архитектуры тестовых сценариев с помощью подхода Page Object Model, о котором мы будем говорить далее. Пока же предлагаем пользоваться первым методом с явным указанием способа поиска, так как он кажется нам более удобным, но ничто не мешает вам пользоваться и тем, и другим. Поля класса By, которые можно использовать для поиска:
•	By.ID – поиск по уникальному атрибуту id элемента;
•	By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
•	By.XPATH – поиск элементов с помощью языка запросов XPath;
•	By.NAME – поиск по атрибуту name элемента;
•	By.TAG_NAME – поиск по названию тега;
•	By.CLASS_NAME – поиск по атрибуту class элемента;
•	By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
•	By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.

ink = browser.find_element_by_link_text("» Degree symbol examples")
link.click()
А если хотим найти элемент со ссылкой по подстроке, то нужно написать следующий код: 
link = browser.find_element_by_partial_link_text("examples")
link.click()


checkbox и radiobutton
option1 = browser.find_element_by_css_selector("[value='python']") option1.click()


--Поиск элементов с помощью XPath--
В работе с веб-страницами не всегда получается найти селектор, однозначно описывающий путь к нужному элементу. В такой ситуации для тестировщика лучшим решением проблемы будет пойти к фронтенд-разработчику проекта и договориться о специальном атрибуте, который будет использоваться в автотестах. Таким образом можно повысить тестируемость приложения. Увы, проекты бывают разные, и не всегда это возможно. И когда другого выхода больше нет, а автоматизировать как-то надо, можно обратиться к помощи языка запросов XPath.
 
На тему XPath мнения расходятся, но, как бы то ни было, это мощный и гибкий инструмент, который позволяет писать сложные запросы для поиска элементов.
Прежде всего, XPath (XML Path Language) это язык запросов, который использует древовидную структуру документа. Проверять XPath-запросы можно точно так же как и CSS-селекторы - в консоли разработчика. Откройте консоль на странице с котиками http://suninjuly.github.io/cats.html, и давайте на её примере разберемся в основах синтаксиса. Попробуйте вбить каждый из запросов-примеров в строку поиска, чтобы увидеть, что именно находит поисковый запрос.
 1. XPath запрос всегда начинается с символа / или //
Символ / аналогичен символу > в CSS-селекторе, а символ // - пробелу. Их смысл:
•	el1/el2 - выбирает элементы el2, являющиеся прямыми потомками el1;
•	el1//el2 - выбирает элементы el2, являющиеся потомками el1 любой степени вложенности.
Разница состоит в том, что в XPath, когда мы начинаем запрос с символа /,  мы должны указать элемент, являющийся корнем нашего документа. Корнем всегда будет элемент с тегом <html>. Пример: /html/body/header
Мы можем начинать запрос и с символа //. Это будет означать, что мы хотим найти всех потомков корневого элемента без указания корневого элемента. В этом случае, для поиска того же хедера, мы можем выполнить запрос //header, так как других заголовков у нас нет.
Важно! Такой поиск может быть неоднозначным. Например, запрос //div вернет вам все элементы с тегом <div>. Избегайте неоднозначных ситуаций, они плохо влияют на здоровье ваших автотестов.
2. Символ [ ] - это команда фильтрации
Если по запросу найдено несколько элементов, то будет произведена фильтрация по правилу, указанному в скобках.
Правил фильтрации очень много:
•	по любому атрибуту, будь то id, class, title (или любой другой). Например, мы хотим найти картинку с летящим котом, для этого можно выполнить запрос //img[@id='bullet']
•	по порядковому номеру. Допустим, мы хотим выбрать вторую по порядку карточку с котом. Для этого найдем элемент с классом "row" и возьмем его второго потомка: //div[@class="row"]/div[2]
•	по полному совпадению текста. Да, XPath - это единственный способ найти элемент по внутреннему тексту. Если мы хотим найти блок текста с котом-Лениным, можно воспользоваться XPath селектором //p[text()="Lenin cat"]. Такой селектор вернет элемент, только если текст полностью совпадет. Здесь важно сказать, что не всегда поиск по тексту - это хорошая практика, особенно в случае мультиязычных сайтов.
•	по частичному совпадению текста или атрибута. Для этого нужна функция contains. Запрос //p[contains(text(), "cat")]вернет нам все абзацы текста, которые содержат слово cat. Точно так же можно искать по частичному совпадению других атрибутов, это удобно, если у элемента несколько классов. Посмотрите на код навбара сайта с котами. Его можно найти селектором //div[contains(@class, "navbar")]
•	в фильтрации еще можно использовать булевы операции (and, or, not) и некоторые простые арифметические выражения (но вообще не стоит, наверное). Допустим, мы хотим найти картинку обязательно с data-type "animal" и именем "bullet-cat", для этого подойдет запрос: //img[@name='bullet-cat' and @data-type='animal']
 3. Символ * - команда выбора всех элементов
•	Например можем найти текст в заголовке запросом //div/*[@class="jumbotron-heading"]. Это может быть удобно, когда мы не знаем точно тег элемента, который ищем.
4. Поиск по классу в XPath регистрозависим
Также как и в случае поиска по CSS-селектором будьте внимательными к регистру при поиске по классам: 
//div/*[@class="Jumbotron-heading"] не найдет элемент на нашей странице.
 
--Что важно знать про XPath, чтобы пользоваться им безболезненно:--
•	Не используйте селекторы вида //div[1]/div[2]/div[3] без крайней нужды: по такому селектору невозможно с первого раза понять, что за элемент вы ищете. А когда структура страницы хоть немного изменится, то ваш селектор с большой вероятностью перестанет работать;
•	Если есть возможность использовать CSS-селекторы: сlass, id или name - лучше использовать их вместо поиска по XPath;
•	Можно искать по полному или частичному совпадению текста или любого атрибута;
•	Можно использовать булевы операции и простую арифметику;
•	Можно удобно перемещаться по структуре документа (переходить к потомкам и к родителям);
•	Подойдет, когда у сайта всё плохо с атрибутами и нет возможности достучаться до разработчиков;
•	Есть мнение, что поиск по XPath в среднем медленнее, чем по css. Но достоверно это неизвестно;
•	Не стоит использовать разные расширения для браузеров по поиску XPath: они подбирают нечитабельные и переусложненные селекторы. Лучше потратить немного времени и разобраться в синтаксисе самостоятельно, тем более, что он не очень сложный.
В курсе мы не будем работать с XPath-селекторами, и в основном будем использовать CSS. В случае необходимости можно познакомиться с XPath подробнее по следующим ссылкам:
https://www.w3schools.com/xml/xpath_syntax.asp
https://msdn.microsoft.com/ru-ru/library/ms256086(v=vs.120).aspx
https://msiter.ru/tutorials/xpath/syntax
https://habr.com/post/114772/
http://internetka.in.ua/xpath-start-part1/
http://internetka.in.ua/xpath-start-part2/
http://internetka.in.ua/xpath-start-part3/
http://internetka.in.ua/xpath-start4/
https://testerslittlehelper.wordpress.com/2016/07/10/real-xpath/
https://drive.google.com/file/d/0B_IyyodHL4rXcU1BY1R1TzFXbmc/view

--АТРИБУТЫ ЭЛЕМЕНТА--
from selenium import webdriver
import time

link = "http://suninjuly.github.io/math.html"

try:
    browser = webdriver.Chrome()
    browser.get(link)

#проверяем значение атрибута checked у people_radio
    people_radio = browser.find_element_by_id("peopleRule")
    people_checked = people_radio.get_attribute("checked")
    print("value of people radio: ", people_checked)
    assert people_checked is not None, "People radio is not selected by default"

#проверяем значение атрибута checked у robots_radio
    robots_radio = browser.find_element_by_id("robotsRule")
    robots_checked = robots_radio.get_attribute("checked")
    print("value of robots_radio: ", robots_checked)
    assert robots_checked is None

#проверяем значение атрибута disabled у кнопки Submit
    button = browser.find_element_by_css_selector('.btn')
    button_disabled = button.get_attribute("disabled")
    print("value of button Submit: ", button_disabled)
    assert button_disabled is None

#проверяем значение атрибута disabled у кнопки Submit после таймаута
    time.sleep(10)
    button_disabled = button.get_attribute("disabled")
    print("value of button Submit after 10sec: ", button_disabled)
    assert button_disabled is not None

finally:
    # закрываем браузер после всех манипуляций
    browser.quit()

# не забываем оставить пустую строку в конце файла

--ВЫТАЩИТЬ ЗНАЧЕНИЕ ИЗ АРИБУТА VALUE--
x_element = browser.find_element_by_id("treasure")
x = x_element.get_attribute("valuex")    
print(x)

--Работа со СПИСКАМИ--
 
Посмотрим, как выглядит html для списка:

<label for="dropdown">Выберите язык программирования:</label>
<select id="dropdown" class="custom-select">
 <option selected>--</option>
 <option value="1">Python</option>
 <option value="2">Java</option>
 <option value="3">JavaScript</option>
</select>
Варианты ответа задаются тегом option, значение value может отсутствовать. Можно отмечать варианты с помощью обычного метода click(). Для этого сначала нужно применить метод click() для элемента с тегом select, чтобы список раскрылся, а затем кликнуть на нужный вариант ответа:
from selenium import webdriver

browser = webdriver.Chrome()
browser.get(link)


browser.find_element_by_tag_name("select").click()
browser.find_element_by_css_selector("option:nth-child(2)").click()
Последняя строчка может выглядеть и так:
browser.find_element_by_css_selector("[value='1']").click()
Это не самый удобный способ, так как нам приходится делать лишний клик для открытия списка.
Есть более удобный способ, для которого используется специальный класс Select из библиотеки WebDriver. Вначале мы должны инициализировать новый объект, передав в него WebElement с тегом select. Далее можно найти любой вариант из списка с помощью метода select_by_value(value):
from selenium.webdriver.support.ui import Select
select = Select(browser.find_element_by_tag_name("select"))
select.select_by_value("1") # ищем элемент с текстом "Python"
Можно использовать еще два метода: select.select_by_visible_text("text") и select.select_by_index(index). Первый способ ищет элемент по видимому тексту, например, select.select_by_visible_text("Python") найдёт "Python" для нашего примера.
Второй способ ищет элемент по его индексу или порядковому номеру. Индексация начинается с нуля. Для того чтобы найти элемент с текстом "Python", нужно использовать select.select_by_index(1), так как опция с индексом 0 в данном примере имеет значение по умолчанию равное "--".


Пример задачи для execute_script
Давайте теперь рассмотрим реальную ситуацию, когда пользователь должен кликнуть на элемент, который внезапно оказывается перекрыт другим элементом на странице.
Для клика в WebDriver мы используем метод click(). Если элемент оказывается перекрыт другим элементом, то наша программа вызовет следующую ошибку:
selenium.common.exceptions.WebDriverException: Message: unknown error: Element <button type="submit" class="btn btn-default" style="margin-bottom: 1000px;">...</button> is not clickable at point (87, 420). Other element would receive the click: <p>...</p>
Из описания ошибки можно понять, что указанный нами элемент нельзя кликнуть в данной точке, т.к. клик произойдёт на другом элементе с тегом <p>.
Чтобы увидеть пример данной ошибки, запустите следующий скрипт:
from selenium import webdriver

browser = webdriver.Chrome()
link = "https://SunInJuly.github.io/execute_script.html"
browser.get(link)
button = browser.find_element_by_tag_name("button")
button.click()
assert True
Теперь вы можете сами посмотреть на эту страницу и увидеть, что огромный футер действительно перекрывает нужную нам кнопку. Футером (footer) называется нижний блок, который обычно одинаков для всех страниц сайта. Чтобы понять, как решить эту проблему, нужно разобраться, как работает метод click().
В первую очередь WebDriver проверит, что ширина и высота элемента больше 0, чтобы по нему можно было кликнуть.
Затем, если элемент находится за границей окна браузера, WebDriver автоматически проскроллит страницу, чтобы элемент попал в область видимости, то есть не находился за границей экрана. Но это не гарантирует того, что элемент не перекрыт другим элементом, который тоже находится в области видимости.
А в какую точку элемента будет происходить клик? Selenium рассчитывает координаты центра элемента и производит клик в вычисленную точку. Это тоже приведёт к ошибке, если часть элемента всё-таки видна, но элемент перекрыт больше чем на половину своей высоты или ширины.
Если мы столкнулись с такой ситуацией, мы можем заставить браузер дополнительно проскролить нужный элемент, чтобы он точно стал видимым.
Делается это с помощью следующего скрипта:
"return arguments[0].scrollIntoView(true);"
В итоге, чтобы кликнуть на перекрытую кнопку, нам нужно выполнить следующие команды в коде:
button = browser.find_element_by_tag_name("button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()
В метод execute_script мы передали текст js-скрипта и найденный элемент button, к которому нужно будет проскролить страницу. После выполнения кода элемент button должен оказаться в верхней части страницы.
Также можно проскролить всю страницу целиком на строго заданное количество пикселей. Эта команда проскроллит страницу на 100 пикселей вниз:
browser.execute_script("window.scrollBy(0, 100);")
!Важно. Мы не будем в этом курсе изучать, как работает JavaScript, и обойдемся только приведенным выше примером скрипта с прокруткой страницы. Для сравнения приведем скрипт на этом языке, который делает то же, что приведенный выше пример для WebDriver:
// javascript
button = document.getElementsByTagName("button")[0];
button.scrollIntoView();
Можете попробовать исполнить его в консоли браузера на странице http://suninjuly.github.io/execute_script.html. Для этого откройте инструменты разработчика в браузере, перейдите на вкладку консоль  (console), скопируйте туда этот код и нажмите Enter. Таким образом можно протестировать кусочки js кода прежде чем внедрять его в свои тесты на python. 
Обратите внимание, что в коде в WebDriver нужно использовать ключевое слово return. Также его нужно будет использовать, когда вы захотите получить какие-то данные после выполнения скрипта. При этом при тестировании скрипта в консоли браузера слово return использовать не надо.
Загрузка файлов
Если нам понадобится загрузить файл на веб-странице, мы можем использовать уже знакомый нам метод send_keys. Только теперь нам нужно в качестве аргумента передать путь к нужному файлу на диске вместо простого текста.
Чтобы указать путь к файлу, можно использовать стандартный модуль Python для работы с операционной системой - os. В этом случае ваш код не будет зависеть от операционной системы, которую вы используете. Добавление файла будет работать и на Windows, и на Linux.
Пример кода, который позволяет указать путь к файлу 'file.txt', находящемуся в той же папке, что и скрипт, который вы запускаете:
import os 

current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
element.send_keys(file_path)
Попробуйте добавить в файл отдельно команды print(os.path.abspath(__file__)) и print(os.path.abspath(os.path.dirname(__file__))) и посмотрите на разницу. Подробнее о методах модуля os можете почитать самостоятельно в документации: https://docs.python.org/3/library/os.path.html. Обратите внимание, что это будет работать только при запуске кода из файла, в интерпретаторе не сработает.
from selenium import webdriver
import time 
import os

try:
	link = "http://suninjuly.github.io/file_input.html"
	browser = webdriver.Chrome()
	browser.get(link)
    
	#заполняем поля
	firstname = browser.find_element_by_name("firstname")
	firstname.send_keys("firstname")
	lastname = browser.find_element_by_name("lastname")
	lastname.send_keys("lastname")
	email = browser.find_element_by_name("email")
	email.send_keys("email")
	
	#выбираем файл
	file1 = browser.find_element_by_id("file")
	# получаем путь к директории текущего исполняемого файла 
	current_dir = os.path.abspath(os.path.dirname(__file__))
	# добавляем к этому пути имя файла     
	file_path = os.path.join(current_dir, 'file.txt')           
	file1.send_keys(file_path)
	
	
	# Отправляем заполненную форму
	submit = browser.find_element_by_class_name("btn.btn-primary")
	submit.click()
 
except Exception as error:
    print(f'{error}')
    #print(welcome_text)

finally:
    # успеваем скопировать код за 30 секунд
    time.sleep(10)
    # закрываем браузер после всех манипуляций
    browser.quit()
    
# не забываем оставить пустую строку в конце файла

 
--ALERT и как с ними жить--
Мы уже встречали alert в нашем курсе, когда получали число-ответ в задачах. Также мы узнали, что можно самостоятельно вызвать alert с помощью JavaScript:
alert('Hello!');
 
Теперь рассмотрим ситуацию, когда в сценарии теста возникает необходимость не только получить содержимое alert, но и нажать кнопку OK, чтобы закрыть alert. Alert является модальным окном: это означает, что пользователь не может взаимодействовать дальше с интерфейсом, пока не закроет alert. Для этого нужно сначала переключиться на окно с alert, а затем принять его с помощью команды accept():
alert = browser.switch_to.alert
alert.accept()
Чтобы получить текст из alert, используйте свойство text объекта alert:
alert = browser.switch_to.alert
alert_text = alert.text
Другой вариант модального окна, который предлагает пользователю выбор согласиться с сообщением или отказаться от него, называется confirm. Для переключения на окно confirm используется та же команда, что и в случае с alert:
confirm = browser.switch_to.alert
confirm.accept()
Для confirm-окон можно использовать следующий метод для отказа:
confirm.dismiss()
То же самое, что и при нажатии пользователем кнопки "Отмена". 
Третий вариант модального окна — prompt — имеет дополнительное поле для ввода текста. Чтобы ввести текст, используйте метод send_keys():
prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()
Переход на новую вкладку браузера
При работе с веб-приложениями приходится переходить по ссылкам, которые открываются в новой вкладке браузера. WebDriver может работать только с одной вкладкой браузера. При открытии новой вкладки WebDriver продолжит работать со старой вкладкой. Для переключения на новую вкладку надо явно указать, на какую вкладку мы хотим перейти. Это делается с помощью команды switch_to.window:
browser.switch_to.window(window_name)
Чтобы узнать имя новой вкладки, нужно использовать метод window_handles, который возвращает массив имён всех вкладок. Зная, что в браузере теперь открыто две вкладки, выбираем вторую вкладку:
new_window = browser.window_handles[1]
Также мы можем запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться:
first_window = browser.window_handles[0]
После переключения на новую вкладку поиск и взаимодействие с элементами будут происходить уже на новой странице.

--СОСТОЯНИЕ ЭЛЕМЕНТОВ--
Explicit Waits (WebDriverWait и expected_conditions)
В предыдущем шаге мы решили проблему с ожиданием элементов на странице. Однако методы find_element проверяют только то, что элемент появился на странице. В то же время элемент может иметь дополнительные свойства, которые могут быть важны для наших тестов. Рассмотрим пример с кнопкой, которая отправляет данные:
•	Кнопка может быть неактивной, то есть её нельзя кликнуть;
•	Кнопка может содержать текст, который меняется в зависимости от действий пользователя. Например, текст "Отправить" после нажатия кнопки поменяется на "Отправлено";
•	Кнопка может быть перекрыта каким-то другим элементом или быть невидимой.
Если мы хотим в тесте кликнуть на кнопку, а она в этот момент неактивна, то WebDriver все равно проэмулирует действие нажатия на кнопку, но данные не будут отправлены.
Давайте попробуем запустить следующий тест:
from selenium import webdriver

browser = webdriver.Chrome()
# говорим WebDriver ждать все элементы в течение 5 секунд
browser.implicitly_wait(5)

browser.get("http://suninjuly.github.io/wait2.html")

button = browser.find_element_by_id("verify")
button.click()
message = browser.find_element_by_id("verify_message")

assert "successful" in message.text
Мы видим, что WebDriver смог найти кнопку с id="verify" и кликнуть по ней, но тест упал на поиске элемента "verify_message" с итоговым сообщением:
no such element: Unable to locate element: {"method":"id","selector":"verify_message"}
Это произошло из-за того, что WebDriver быстро нашел кнопку и кликнул по ней, хотя кнопка была еще неактивной. На странице мы специально задали программно паузу в 1 секунду после загрузки сайта перед активированием кнопки, но неактивная кнопка в момент загрузки — обычное дело для реального сайта.
Чтобы тест был надежным, нам нужно не только найти кнопку на странице, но и дождаться, когда кнопка станет кликабельной. Для реализации подобных ожиданий в Selenium WebDriver существует понятие явных ожиданий (Explicit Waits), которые позволяют задать специальное ожидание для конкретного элемента. Задание явных ожиданий реализуется с помощью инструментов WebDriverWait и expected_conditions. Улучшим наш тест:
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver

browser = webdriver.Chrome()

browser.get("http://suninjuly.github.io/wait2.html")

# говорим Selenium проверять в течение 5 секунд, пока кнопка не станет кликабельной
button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    )
button.click()
message = browser.find_element_by_id("verify_message")

assert "successful" in message.text
Как вы видите, в этом случае нужно использовать поиск элементов с помощью класса By, который мы рассмотрели ранее. element_to_be_clickable вернет элемент, когда он станет кликабельным, или вернет False в ином случае.
Обратите внимание, что в объекте WebDriverWait используется функция until, в которую передается правило ожидания, элемент, а так же значение, по которому мы будем искать элемент. В модуле expected_conditions есть много других правил, которые позволяют реализовать необходимые ожидания:
•	title_is
•	title_contains
•	presence_of_element_located
•	visibility_of_element_located
•	visibility_of
•	presence_of_all_elements_located
•	text_to_be_present_in_element
•	text_to_be_present_in_element_value
•	frame_to_be_available_and_switch_to_it
•	invisibility_of_element_located
•	element_to_be_clickable
•	staleness_of
•	element_to_be_selected
•	element_located_to_be_selected
•	element_selection_state_to_be
•	element_located_selection_state_to_be
•	alert_is_present
Описание каждого правила можно найти на сайте.
Если мы захотим проверять, что кнопка становится неактивной после отправки данных, то можно задать негативное правило с помощью метода until_not:
# говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
button = WebDriverWait(browser, 5).until_not(
        EC.element_to_be_clickable((By.ID, "verify"))
    )
    
    --ФОРМАТИРОВАНИЕ с помощью f-strings--
И наконец наиболее современный способ форматирования строк, который появился в Python3.6, носит название f-strings. Он позволяет исполнять выражения на Python прямо внутри строк, обладает еще большей лаконичностью и удобством использования. Для использования возможностей f-strings нужно указывать символ f перед строкой в таком формате: f"ваша строка {my_var}". В фигурных скобках указывается имя переменной, значение которой надо подставить в строку, или выражение, результат исполнения которого также требуется подставить в вашу строку.

Подробнее про f-strings можно почитать здесь: https://realpython.com/python-string-formatting/#3-string-interpolation-f-strings-python-36. Так как мы предполагаем, что вы используете последнюю версию Python, то предлагаем вам применять именно этот подход в данном курсе.

Пример 1:

str1 = "one"
str2 = "two"
str3 = "third"
f"Let's count together! {str1}, then goes {str2}, and then {str3}"
Итог выполнения выражений в интерпретаторе:

"Let's count together! one, then goes two, and then third"
Пример 2:

actual_result = "abrakadabra", f"Wrong text, got {actual_result}, something wrong"
Итог выполнения выражений в интерпретаторе:

'Wrong text, got abrakadabra, something wrong'
Пример 3:

>>> f"{2+3}"
'5'

--PYTEST--
PyTest можно найти по ссылке: Useful py.test commands.

Дополнительные материалы про фикстуры, которые мы настоятельно советуем почитать, приведены ниже:
https://habr.com/ru/company/yandex/blog/242795/
https://medium.com/@dmrlx/%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-pytest-cc6175c7d0dc
https://docs.pytest.org/en/latest/fixture.html

--МЕТКИ--
метки (marks). Для маркировки теста нужно написать декоратор вида @pytest.mark.mark_name, где mark_name - произвольная строка.

Давайте разделим тесты в одном из предыдущих примеров на smoke и regression.

test_fixture8.py:

import pytest
from selenium import webdriver

link = "http://selenium1py.pythonanywhere.com/"


@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()


class TestMainPage1():

    @pytest.mark.smoke
    @pytest.mark.win10
    def test_guest_should_see_login_link(self, browser):
        browser.get(link)
        browser.find_element_by_css_selector("#login_link")

    @pytest.mark.skip # чтобы пропустить тест, его отмечают в коде как @pytest.mark.skip, его в pytest ini не надо описывать
    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
        browser.get(link)
        browser.find_element_by_css_selector(".basket-mini .btn-group > a")

Чтобы запустить тест с нужной маркировкой, нужно передать в командной строке параметр -m и нужную метку:

pytest -s -v -m smoke test_fixture8.py
Если всё сделано правильно, то должен запуститься только тест с маркировкой smoke.

При этом вы увидите warning, то есть предупреждение:

PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,
Это предупреждение появилось потому, что в последних версиях PyTest настоятельно рекомендуется регистрировать метки явно перед использованием. Это, например, позволяет избегать опечаток, когда вы можете ошибочно пометить ваш тест несуществующей меткой, и он будет пропускаться при прогоне тестов.

----Как же регистрировать метки?------
Создайте файл pytest.ini в корневой директории вашего тестового проекта и добавьте в файл следующие строки:

[pytest]
markers =
    smoke: marker for smoke tests
    regression: marker for regression tests
    win10: only for windows 10
    otherMetka
Текст после знака ":" является поясняющим - его можно не писать.

Снова запустите тесты:

pytest -s -v -m smoke test_fixture8.py
pytest -s -v -m "not smoke" selenium_course\test_fixture8.py
pytest -s -v -m "smoke and win10" selenium_course\test_fixture8.py

